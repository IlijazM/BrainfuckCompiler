package compile;

import java.util.ArrayList;

public abstract class Command {
	
	static ArrayList<String> vars;
	public static ArrayList<Command> commands;
	
	public static void Init() {
		vars = new ArrayList<>();
		commands = new ArrayList<>();
		
		commands.add(new Set());
		commands.add(new Add());
		commands.add(new Sub());
		commands.add(new Print());
	}
	
	public static void executeAll(String string) {
		for (int i = 0; i < commands.size(); i++) {
			Command command = commands.get(i);
			
			command.execute(string, i + 1);
		}
	}
	
	static int getPointer(String s) {
		try {
			for (int i = 0; i < vars.size(); i++) {
				if (vars.get(i).equals(s)) {
					return i;
				}
			}
			
			vars.add(s);
			return vars.size() - 1;
		} catch (Exception e) {
			
		}
		
		return -1;
	}
	
	static String gotoc(int i) {
		String s = "";
		int j = Compiler.pointer - i;
		
		if (j > 0) {
			for (int k = 0; k < j; k++) {
				s += "<";
			}
		} else {
			j = -j;
			
			for (int k = 0; k < j; k++) {
				s += ">";
			}
		}
		
		Compiler.pointer = i;
		
		return s;
	}
	
	static int findTempMem() {
		for (int i = 0; i < Compiler.mem.length; i++) {
			if (Compiler.mem[i] == 0) {
				Compiler.mem[i] = 2;
				return i;
			}
		}
		
		return -1;
	}
	
	static String add(int amount) {
		String s = "";
		
		if (amount > 15) {
			int p = Compiler.pointer;
			
			Compiler.mem[p] = 1;
			
			int m1 = (int) Math.sqrt(amount);
			int m2 = (int) (amount / m1);
			int a = amount - m1 * m2;
			
			int t = findTempMem();
			
			s += gotoc(t);
			
			for (int i = 0; i < m1; i++) {
				s += '+';
			}
			
			s += "[" + gotoc(p);
			
			for (int i = 0; i < m2; i++) {
				s += '+';
			}
			
			s += gotoc(t) + "-]" + gotoc(p);
			
			for (int i = 0; i < a; i++) {
				s += '+';
			}
			
			Compiler.mem[p] = 1;
			
		} else {
			for (int i = 0; i < amount; i++) {
				s += '+';
			}
		}
		
		return s;
	}
	
	static String sub(int amount) {
		String s = "";
		
		if (amount > 15) {
			int p = Compiler.pointer;
			
			Compiler.mem[p] = 1;
			
			int m1 = (int) Math.sqrt(amount);
			int m2 = (int) (amount / m1);
			int a = amount - m1 * m2;
			
			int t = findTempMem();
			
			s += gotoc(t);
			
			for (int i = 0; i < m1; i++) {
				s += '+';
			}
			
			s += "[" + gotoc(p);
			
			for (int i = 0; i < m2; i++) {
				s += '-';
			}
			
			s += gotoc(t) + "-]" + gotoc(p);
			
			for (int i = 0; i < a; i++) {
				s += '+';
			}
			
			Compiler.mem[p] = 1;
			
		} else {
			for (int i = 0; i < amount; i++) {
				s += '-';
			}
		}
		
		return s;
	}
	
	static String set(int i, int j) {
		int p = Compiler.pointer;
		int t = findTempMem();
		return gotoc(j) + "[-" + gotoc(i) + "+" + gotoc(t) + "+" + gotoc(j) + "]" + gotoc(t) + "[" + gotoc(j) + "+" + gotoc(t) + "-]" + gotoc(p);
	}
	
	static boolean isNumber(String str) {
		return false;
	}
	
	public void execute(String string, int line) {
		int index = string.indexOf(' ');
		
		if (index >= 0) {
			String begin = string.substring(0, index);
			
			if (begin.equalsIgnoreCase(name())) {
				String[] args = string.split(" ");
				
				try {
					Compiler.appendCode(convert(args) + System.lineSeparator());
				} catch (IndexOutOfBoundsException e1) {
					System.out.println("index out of bounds exception at line " + line + ": " + string);
					System.out.println(description());
				} catch (NumberFormatException e2) {
					System.out.println("Number format exception at line " + line + ": " + string);
					System.out.println(description());
				}
			}
		}
		
		for (int i = 0; i < Compiler.mem.length; i++) {
			if (Compiler.mem[i] == 2) {
				Compiler.mem[i] = 0;
			}
		}
	}
	
	public String description() {
		return "no description available for " + name();
	}
	
	public abstract String name();
	
	public abstract String convert(String[] args) throws IndexOutOfBoundsException, NumberFormatException;
}
